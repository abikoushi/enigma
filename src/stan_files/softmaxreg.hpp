/*
    ENIGMA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ENIGMA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ENIGMA.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_softmaxreg_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_softmaxreg");
    reader.add_event(46, 46, "end", "model_softmaxreg");
    return reader;
}

#include <meta_header.hpp>
 class model_softmaxreg : public prob_grad {
private:
    int N;
    int K;
    int L;
    int D;
    vector<vector<int> > y;
    matrix_d X;
    vector_d alpha;
public:
    model_softmaxreg(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_softmaxreg(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_softmaxreg_namespace::model_softmaxreg";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("y", "N", N);
            validate_non_negative_index("y", "K", K);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N,K));
            validate_non_negative_index("y", "N", N);
            validate_non_negative_index("y", "K", K);
            y = std::vector<std::vector<int> >(N,std::vector<int>(K,int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_1__ = K;
            for (size_t i_1__ = 0; i_1__ < y_limit_1__; ++i_1__) {
                size_t y_limit_0__ = N;
                for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                    y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "D", D);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,D));
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "D", D);
            X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(D));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = N;
            size_t X_n_mat_lim__ = D;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    X(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("alpha", "L", L);
            context__.validate_dims("data initialization", "alpha", "vector_d", context__.to_vec(L));
            validate_non_negative_index("alpha", "L", L);
            alpha = vector_d(static_cast<Eigen::VectorXd::Index>(L));
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            size_t alpha_i_vec_lim__ = L;
            for (size_t i_vec__ = 0; i_vec__ < alpha_i_vec_lim__; ++i_vec__) {
                alpha[i_vec__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"alpha",alpha,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            validate_non_negative_index("pi", "L", L);
            num_params_r__ += (L - 1);
            current_statement_begin__ = 12;
        validate_non_negative_index("beta", "D", D);
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += D * K;
            current_statement_begin__ = 13;
        validate_non_negative_index("gamma", "K", K);
            validate_non_negative_index("gamma", "L", L);
            num_params_r__ += K * L;
            current_statement_begin__ = 14;
            ++num_params_r__;
            current_statement_begin__ = 15;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_softmaxreg() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("pi")))
            throw std::runtime_error("variable pi missing");
        vals_r__ = context__.vals_r("pi");
        pos__ = 0U;
        validate_non_negative_index("pi", "L", L);
        context__.validate_dims("initialization", "pi", "vector_d", context__.to_vec(L));
        vector_d pi(static_cast<Eigen::VectorXd::Index>(L));
        for (int j1__ = 0U; j1__ < L; ++j1__)
            pi(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(pi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable pi: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "D", D);
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("initialization", "beta", "matrix_d", context__.to_vec(D,K));
        matrix_d beta(static_cast<Eigen::VectorXd::Index>(D),static_cast<Eigen::VectorXd::Index>(K));
        for (int j2__ = 0U; j2__ < K; ++j2__)
            for (int j1__ = 0U; j1__ < D; ++j1__)
                beta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "K", K);
        validate_non_negative_index("gamma", "L", L);
        context__.validate_dims("initialization", "gamma", "matrix_d", context__.to_vec(K,L));
        matrix_d gamma(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(L));
        for (int j2__ = 0U; j2__ < L; ++j2__)
            for (int j1__ = 0U; j1__ < K; ++j1__)
                gamma(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  pi;
            (void) pi;  // dummy to suppress unused var warning
            if (jacobian__)
                pi = in__.simplex_constrain(L,lp__);
            else
                pi = in__.simplex_constrain(L);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.matrix_constrain(D,K,lp__);
            else
                beta = in__.matrix_constrain(D,K);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.matrix_constrain(K,L,lp__);
            else
                gamma = in__.matrix_constrain(K,L);

            T__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            T__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0,lp__);
            else
                tau = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 18;
            validate_non_negative_index("Xbeta", "N", N);
            validate_non_negative_index("Xbeta", "K", K);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Xbeta(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
            (void) Xbeta;  // dummy to suppress unused var warning

            stan::math::initialize(Xbeta, DUMMY_VAR__);
            stan::math::fill(Xbeta,DUMMY_VAR__);


            current_statement_begin__ = 19;
            stan::math::assign(Xbeta, multiply(X,beta));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < N; ++i0__) {
                for (int i1__ = 0; i1__ < K; ++i1__) {
                    if (stan::math::is_uninitialized(Xbeta(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Xbeta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 18;

            // model body

            current_statement_begin__ = 22;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 23;
                lp_accum__.add(normal_log(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),0,sigma));
            }
            current_statement_begin__ = 25;
            for (int l = 1; l <= L; ++l) {

                current_statement_begin__ = 26;
                lp_accum__.add(normal_log(stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "gamma"),0,tau));
            }
            current_statement_begin__ = 28;
            lp_accum__.add(dirichlet_log(pi,alpha));
            current_statement_begin__ = 29;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 30;
                validate_non_negative_index("lp", "L", L);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  lp(static_cast<Eigen::VectorXd::Index>(L));
                (void) lp;  // dummy to suppress unused var warning

                stan::math::initialize(lp, DUMMY_VAR__);
                stan::math::fill(lp,DUMMY_VAR__);


                current_statement_begin__ = 31;
                for (int l = 1; l <= L; ++l) {

                    current_statement_begin__ = 32;
                    stan::math::assign(get_base1_lhs(lp,l,"lp",1), (log(get_base1(pi,l,"pi",1)) + multinomial_log(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y"),softmax(add(stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "gamma"),transpose(stan::model::rvalue(Xbeta, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Xbeta")))))));
                }
                current_statement_begin__ = 34;
                lp_accum__.add(log_sum_exp(lp));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi");
        names__.push_back("beta");
        names__.push_back("gamma");
        names__.push_back("sigma");
        names__.push_back("tau");
        names__.push_back("Xbeta");
        names__.push_back("cate");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(L);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_softmaxreg_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d pi = in__.simplex_constrain(L);
        matrix_d beta = in__.matrix_constrain(D,K);
        matrix_d gamma = in__.matrix_constrain(K,L);
        double sigma = in__.scalar_lb_constrain(0);
        double tau = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < L; ++k_0__) {
            vars__.push_back(pi[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < L; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(gamma(k_0__, k_1__));
                }
            }
        vars__.push_back(sigma);
        vars__.push_back(tau);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 18;
            validate_non_negative_index("Xbeta", "N", N);
            validate_non_negative_index("Xbeta", "K", K);
            matrix_d Xbeta(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
            (void) Xbeta;  // dummy to suppress unused var warning

            stan::math::initialize(Xbeta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Xbeta,DUMMY_VAR__);


            current_statement_begin__ = 19;
            stan::math::assign(Xbeta, multiply(X,beta));

            // validate transformed parameters
            current_statement_begin__ = 18;

            // write transformed parameters
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(Xbeta(k_0__, k_1__));
                }
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 38;
            validate_non_negative_index("cate", "L", L);
            validate_non_negative_index("cate", "N", N);
            vector<vector_d> cate(N, (vector_d(static_cast<Eigen::VectorXd::Index>(L))));
            stan::math::initialize(cate, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(cate,DUMMY_VAR__);


            current_statement_begin__ = 39;
            for (int n = 1; n <= N; ++n) {
                {
                current_statement_begin__ = 40;
                validate_non_negative_index("lp", "L", L);
                vector_d lp(static_cast<Eigen::VectorXd::Index>(L));
                (void) lp;  // dummy to suppress unused var warning

                stan::math::initialize(lp, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(lp,DUMMY_VAR__);


                current_statement_begin__ = 41;
                for (int l = 1; l <= L; ++l) {

                    current_statement_begin__ = 42;
                    stan::math::assign(get_base1_lhs(lp,l,"lp",1), (categorical_log(l,pi) + multinomial_log(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y"),softmax(add(stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "gamma"),transpose(stan::model::rvalue(Xbeta, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Xbeta")))))));
                }
                current_statement_begin__ = 44;
                stan::math::assign(get_base1_lhs(cate,n,"cate",1), softmax(lp));
                }
            }

            // validate generated quantities
            current_statement_begin__ = 38;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                stan::math::check_simplex(function__,"cate[k0__]",cate[k0__]);
            }

            // write generated quantities
            for (int k_1__ = 0; k_1__ < L; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(cate[k_0__][k_1__]);
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_softmaxreg";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= L; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Xbeta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cate" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (L - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= L; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Xbeta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= (L - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cate" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef model_softmaxreg_namespace::model_softmaxreg stan_model;


#endif
